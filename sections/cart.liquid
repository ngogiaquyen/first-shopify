{% comment %}
  This section is used in the cart template to render /cart page with an
  overview of the items in customer's cart.
  https://shopify.dev/docs/storefronts/themes/architecture/templates/cart
{% endcomment %}

<div class="cart-wrapper">
  <h1>{{ 'cart.title' | t }}</h1>

  <form action="{{ routes.cart_url }}" method="post" class="cart-form" id="cart-form">
    <div class="cart-items">
      {% for item in cart.items %}
        <div class="cart-item" data-item-id="{{ item.key }}">
          <div class="cart-item-info">
            <div class="cart-item-image">
              {% render 'image', image: item.image, url: item.url, alt: item.product.title %}
            </div>
            <div class="cart-item-details">
              <p class="cart-item-title"><a href="{{ item.url }}">{{ item.product.title }}</a></p>
              <p class="cart-item-variant">{{ item.variant.title }}</p>
              <p class="cart-item-price">{{ item.final_price | money }}</p>
            </div>
          </div>
          <div class="cart-item-quantity">
            <div class="quantity-selector">
              <button type="button" class="quantity-btn minus" aria-label="Decrease quantity">-</button>
              <input type="number" name="updates[]" value="{{ item.quantity }}" min="1" aria-label="Quantity" data-item-id="{{ item.key }}">
              <button type="button" class="quantity-btn plus" aria-label="Increase quantity">+</button>
            </div>
          </div>
          <div class="cart-item-actions">
            <button type="button" class="remove-btn" data-item-id="{{ item.key }}">{{ 'cart.remove' | t }}</button>
          </div>
        </div>
      {% endfor %}
      {% if cart.items.size == 0 %}
        <p class="empty-cart">{{ 'cart.empty' | t }}</p>
      {% endif %}
    </div>
    <div class="cart-footer">
      <div class="cart-subtotal">
        <p>{{ 'cart.subtotal' | t }}: <span>{{ cart.total_price | money }}</span></p>
      </div>
      <div class="cart-actions">
        <input type="submit" name="update" value="{{ 'cart.update' | t }}" class="update-btn">
        <input type="submit" name="checkout" value="{{ 'cart.checkout' | t }}" class="checkout-btn">
      </div>
    </div>
  </form>
</div>

<style>
  /* Modern, futuristic styling for the cart page */
  body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #f0f4f8 0%, #d9e2ec 100%);
    color: #1e293b;
    margin: 0;
    overflow-x: hidden;
  }

  .cart-wrapper {
    min-height: calc(100vh - 56px);
    max-width: 1280px;
    margin: 0 auto;
    padding: 2rem 1.5rem;
    animation: fadeIn 0.5s ease-in-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  h1 {
    font-size: 2.5rem;
    font-weight: 800;
    margin: 1.5rem 0;
    color: #1e293b;
    text-align: center;
    background: linear-gradient(90deg, #1e293b, #3b82f6);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    letter-spacing: -0.02em;
  }

  .cart-form {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .cart-items {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    margin-top: 40px;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .cart-item {
    display: flex;
    flex-wrap: wrap;
    grid-template-columns: 120px 1fr 160px 120px;
    align-items: center;
    gap: 1.5rem;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .cart-item:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  }

  .cart-item:last-child {
    border-bottom: none;
  }

  .cart-item-info{
    display: flex;
    align-item: center;
  }

  .cart-item-image img {
    {% comment %} max-width: 120px;
    max-height: 120px; {% endcomment %}
    height: 100%;
    object-fit: cover;
    border-radius: 12px;
    transition: transform 0.4s ease, box-shadow 0.4s ease;
  }

  .cart-item-image img:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
  }

  .cart-item-details {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .cart-item-title a {
    font-size: 1.2rem;
    font-weight: 700;
    color: #1e293b;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .cart-item-title a:hover {
    color: #3b82f6;
  }

  .cart-item-variant {
    font-size: 0.95rem;
    color: #64748b;
    font-weight: 500;
  }

  .cart-item-price {
    font-size: 1.1rem;
    color: #3b82f6;
    font-weight: 700;
    background: linear-gradient(90deg, #3b82f6, #60a5fa);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }

  .cart-item-quantity {
    display: flex;
    align-items: center;
  }

  .quantity-selector {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 12px;
    border: 1px solid rgba(209, 213, 219, 0.3);
    padding: 0.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .quantity-selector input {
    width: 70px;
    padding: 0.75rem;
    border: none;
    font-size: 1rem;
    text-align: center;
    background: transparent;
    color: #1e293b;
    font-weight: 600;
  }

  .quantity-selector input:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
  }

  .quantity-btn {
    width: 40px;
    height: 40px;
    border: none;
    background: linear-gradient(135deg, #e2e8f0, #f1f5f9);
    color: #1e293b;
    border-radius: 10px;
    cursor: pointer;
    font-size: 1.3rem;
    transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
  }

  .quantity-btn:hover {
    background: linear-gradient(135deg, #3b82f6, #60a5fa);
    color: #ffffff;
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .quantity-btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
  }

  .cart-item-actions {
    display: flex;
    justify-content: flex-end;
  }

  .remove-btn {
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #ef4444, #f87171);
    color: #ffffff;
    border: none;
    border-radius: 10px;
    font-size: 0.95rem;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
  }

  .remove-btn:hover {
    background: linear-gradient(135deg, #dc2626, #ef4444);
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
  }

  .remove-btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.3);
  }

  .cart-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 2rem;
    padding: 2rem;
    gap: 20px;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .cart-subtotal p {
    font-size: 1.3rem;
    font-weight: 700;
    color: #1e293b;
  }

  .cart-subtotal span {
    background: linear-gradient(90deg, #3b82f6, #60a5fa);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    font-weight: 800;
  }

  .cart-actions {
    display: flex;
    gap: 1.5rem;
  }

  .update-btn {
    display: none;
    padding: 0.75rem 2rem;
    background: linear-gradient(135deg, #6b7280, #9ca3af);
    color: #ffffff;
    border: none;
    border-radius: 10px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
  }

  .update-btn:hover {
    background: linear-gradient(135deg, #4b5563, #6b7280);
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(107, 114, 128, 0.3);
  }

  .update-btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(107, 114, 128, 0.3);
  }

  .checkout-btn {
    padding: 0.75rem 2.5rem;
    background: linear-gradient(135deg, #3b82f6, #60a5fa);
    color: #ffffff;
    border: none;
    border-radius: 10px;
    font-size: 1.1rem;
    font-weight: 700;
    cursor: pointer;
    transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
  }

  .checkout-btn:hover {
    background: linear-gradient(135deg, #2563eb, #3b82f6);
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .checkout-btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
  }

  .empty-cart {
    text-align: center;
    font-size: 1.2rem;
    color: #64748b;
    padding: 3rem;
    font-weight: 500;
    animation: fadeIn 0.5s ease-in-out;
  }

  /* Responsive design for tablets and mobile */
  @media (max-width: 1024px) {
    .cart-wrapper {
      padding: 1.5rem 1rem;
    }

    h1 {
      font-size: 2rem;
    }

    .cart-items {
      padding: 1.5rem;
      margin-top: 60px;
    }

    .cart-item {
      grid-template-columns: 100px 1fr 140px 100px;
      gap: 1rem;
      padding: 1.25rem;
    }

    .cart-item-image img {
      max-width: 100px;
      max-height: 100px;
    }

    .cart-item-title a {
      font-size: 1.1rem;
    }

    .cart-item-price {
      font-size: 1rem;
    }

    .quantity-selector input {
      width: 60px;
    }

    .quantity-btn {
      width: 36px;
      height: 36px;
    }

    .cart-footer {
      padding: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .cart-wrapper {
      padding: 1rem 0.75rem;
    }

    .cart-form {
      padding: 0 0.75rem;
    }

    h1 {
      font-size: 1.75rem;
      margin: 1rem 0;
    }

    .cart-items {
      padding: 1rem;
      margin-top: 50px;
      border-radius: 10px;
    }

    .cart-item {
      grid-template-columns: 80px 1fr;
      grid-template-rows: auto auto auto;
      gap: 1rem;
      padding: 1rem;
    }

    .cart-item-image {
      grid-row: 1 / 2;
      grid-column: 1 / 2;
    }

    .cart-item-details {
      grid-row: 1 / 2;
      grid-column: 2 / 3;
    }

    .cart-item-quantity {
      grid-row: 2 / 3;
      grid-column: 1 / 3;
    }

    .cart-item-actions {
      grid-row: 3 / 4;
      grid-column: 1 / 3;
      justify-content: flex-start;
    }

    .cart-item-image img {
      max-width: 80px;
      max-height: 80px;
    }

    .cart-item-title a {
      font-size: 1rem;
    }

    .cart-item-variant {
      font-size: 0.85rem;
    }

    .cart-item-price {
      font-size: 0.9rem;
    }

    .quantity-selector {
      gap: 0.5rem;
    }

    .quantity-selector input {
      width: 50px;
      padding: 0.5rem;
    }

    .quantity-btn {
      width: 32px;
      height: 32px;
      font-size: 1.1rem;
    }

    .remove-btn {
      padding: 0.5rem 1rem;
      font-size: 0.85rem;
    }

    .cart-footer {
      flex-direction: column;
      gap: 1rem;
      padding: 1rem;
      border-radius: 10px;
    }

    .cart-subtotal p {
      font-size: 1.1rem;
    }

    .cart-actions {
      width: 100%;
      flex-direction: column;
      gap: 1rem;
    }

    .update-btn {
      padding: 0.75rem;
      font-size: 0.95rem;
    }

    .checkout-btn {
      padding: 0.75rem;
      font-size: 1rem;
    }
  }

  @media (max-width: 480px) {
    .cart-wrapper {
      padding: 0.75rem 0.5rem;
    }

    h1 {
      font-size: 1.5rem;
    }

    .cart-items {
      padding: 0.75rem;
    }

    .cart-item {
      padding: 0.75rem;
    }

    .cart-item-title a {
      font-size: 0.9rem;
    }

    .cart-item-variant {
      font-size: 0.8rem;
    }

    .cart-item-price {
      font-size: 0.85rem;
    }

    .quantity-selector input {
      width: 45px;
    }

    .quantity-btn {
      width: 28px;
      height: 28px;
    }

    .remove-btn {
      padding: 0.5rem;
      font-size: 0.8rem;
    }

    .cart-footer {
      padding: 0.75rem;
    }

    .cart-subtotal p {
      font-size: 1rem;
    }
  }
</style>

<script>
  // Hàm định dạng tiền tệ của Shopify
  if (!window.Shopify) window.Shopify = {};
  Shopify.formatMoney = function(cents, format = "{{ shop.money_format }}") {
    if (typeof cents === 'string') {
      cents = cents.replace('.', '');
    }
    let value = '';
    const placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    const formatString = format || '{{ shop.money_format }}';

    function formatWithDelimiters(number, precision = 2, thousands = ',', decimal = '.') {
      if (isNaN(number) || number == null) {
        return 0;
      }
      number = (number / 100.0).toFixed(precision);
      const parts = number.split('.');
      const dollars = parts[0].replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + thousands);
      const centsPart = parts[1] ? decimal + parts[1] : '';
      return dollars + centsPart;
    }

    switch (formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }
    return formatString.replace(placeholderRegex, value);
  };

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('cart-form');

    // Handle quantity changes
    form.querySelectorAll('.quantity-btn').forEach(button => {
      button.addEventListener('click', async () => {
        const input = button.parentElement.querySelector('input');
        const itemId = input.dataset.itemId;
        let quantity = parseInt(input.value);
        quantity = button.classList.contains('plus') ? quantity + 1 : Math.max(1, quantity - 1);
        input.value = quantity;

        // Gửi yêu cầu AJAX để cập nhật số lượng
        try {
          const response = await fetch('/cart/change.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              id: itemId,
              quantity: quantity
            })
          });

          if (response.ok) {
            const data = await response.json();
            // Cập nhật tổng giá giỏ hàng trên giao diện
            const subtotalElement = form.querySelector('.cart-subtotal span');
            subtotalElement.textContent = Shopify.formatMoney(data.total_price);

            // Cập nhật giá của sản phẩm
            const itemPriceElement = button.closest('.cart-item').querySelector('.cart-item-price');
            const item = data.items.find(i => i.key === itemId);
            if (item) {
              itemPriceElement.textContent = Shopify.formatMoney(item.final_price);
            }
          } else {
            console.error('Failed to update quantity');
          }
        } catch (error) {
          console.error('Error:', error);
        }
      });
    });

    // Handle remove item
    form.querySelectorAll('.remove-btn').forEach(button => {
      button.addEventListener('click', async () => {
        const itemId = button.dataset.itemId;
        try {
          const response = await fetch('/cart/change.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              id: itemId,
              quantity: 0
            })
          });

          if (response.ok) {
            // Xóa sản phẩm khỏi giao diện
            button.closest('.cart-item').remove();
            const data = await response.json();
            // Cập nhật tổng giá
            const subtotalElement = form.querySelector('.cart-subtotal span');
            subtotalElement.textContent = Shopify.formatMoney(data.total_price);

            // Hiển thị thông báo giỏ hàng trống nếu cần
            if (data.items.length === 0) {
              const cartItems = form.querySelector('.cart-items');
              cartItems.innerHTML = '<p class="empty-cart">{{ 'cart.empty' | t }}</p>';
            }
          } else {
            console.error('Failed to remove item');
          }
        } catch (error) {
          console.error('Error:', error);
        }
      });
    });
  });
</script>

{% schema %}
{
  "name": "t:general.cart",
  "settings": []
}
{% endschema %}