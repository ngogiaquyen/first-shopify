{% comment %}
  File này hiển thị tất cả sản phẩm trong Shopify store dưới dạng lưới responsive.
  Bao gồm ảnh sản phẩm, tiêu đề, giá, nút "Thêm vào giỏ", phân trang, và lọc theo loại sản phẩm bằng JavaScript với if-else.
  Cập nhật để hiển thị tất cả sản phẩm (lên đến 1000) bằng paginate, sửa lỗi phân trang, và giữ lọc client-side.
{% endcomment %}

{% style %}
  :root {
    --color-background: #ffffff;
    --color-foreground: #1f2937;
    --color-accent: #2563eb;
    --color-accent-dark: #1d4ed8;
    --color-border: #e2e8f0;
    --color-background-hover: #f1f5f9;
    --color-error: #dc2626;
    --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.1);
    --page-margin: 1.5rem;
    --border-radius: 0.5rem;
    --transition: all 0.3s ease-in-out;
  }

  .products-section {
    max-width: 1280px;
    margin: 0 auto;
    padding: var(--page-margin);
    background: var(--color-background);
    color: var(--color-foreground);
    font-family: 'Inter', system-ui, sans-serif;
  }

  .products-section h1 {
    font-size: 2rem;
    font-weight: 700;
    text-align: center;
    margin-bottom: 2rem;
    color: var(--color-foreground);
  }

  .products-filter {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin-bottom: 2rem;
    justify-content: center;
  }

  .products-filter__type-button {
    background: var(--color-background);
    border: 1px solid var(--color-border);
    padding: 0.75rem 1.5rem;
    border-radius: var(--border-radius);
    color: var(--color-foreground);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: var(--transition);
    text-transform: capitalize;
  }

  .products-filter__type-button:hover {
    background: var(--color-background-hover);
    color: var(--color-accent);
    transform: translateY(-2px);
  }

  .products-filter__type-button--active {
    background: var(--color-accent);
    color: #ffffff;
    border-color: var(--color-accent);
    box-shadow: var(--shadow-sm);
  }

  .products-filter__type-button:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.3);
  }

  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
    padding: 1.5rem 0;
  }

  .product-card {
    display: flex;
    flex-direction: column;
    background: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    overflow: hidden;
    transition: var(--transition);
    box-shadow: var(--shadow-sm);
  }

  .product-card.hidden {
    display: none;
  }

  .product-card:hover {
    transform: translateY(-6px);
    box-shadow: var(--shadow-md);
  }

  .product-card__image-link {
    display: block;
    width: 100%;
  }

  .product-card__image {
    width: 100%;
    height: 280px;
    object-fit: cover;
    transition: transform 0.4s ease;
  }

  .product-card:hover .product-card__image {
    transform: scale(1.05);
  }

  .product-card__content {
    padding: 1.25rem;
    text-align: center;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .product-card__title {
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0.75rem 0;
    color: var(--color-foreground);
    text-decoration: none;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .product-card__title:hover {
    color: var(--color-accent);
  }

  .product-card__price {
    font-size: 1.125rem;
    font-weight: 700;
    color: var(--color-accent);
    margin-bottom: 1.25rem;
  }

  .product-card__button {
    background: var(--color-accent);
    color: #ffffff;
    border: none;
    padding: 0.875rem 1.5rem;
    border-radius: var(--border-radius);
    cursor: pointer;
    font-size: 0.875rem;
    font-weight: 600;
    transition: var(--transition);
    width: 100%;
    text-align: center;
  }

  .product-card__button:hover {
    background: var(--color-accent-dark);
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
  }

  .product-card__button:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.3);
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.75rem;
    margin-top: 2.5rem;
  }

  .pagination__link {
    padding: 0.75rem 1.25rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    text-decoration: none;
    color: var(--color-foreground);
    font-size: 0.875rem;
    font-weight: 500;
    transition: var(--transition);
  }

  .pagination__link:hover {
    background: var(--color-background-hover);
    color: var(--color-accent);
    transform: translateY(-2px);
  }

  .pagination__link--disabled {
    color: #9ca3af;
    pointer-events: none;
    border-color: #e5e7eb;
  }

  .pagination__link--current {
    background: var(--color-accent);
    color: #ffffff;
    border-color: var(--color-accent);
    box-shadow: var(--shadow-sm);
  }

  .error-message {
    text-align: center;
    color: var(--color-error);
    padding: 1.5rem;
    font-size: 1rem;
    font-weight: 500;
  }

  .debug-info {
    background: #f9fafb;
    padding: 1.25rem;
    margin-bottom: 1.5rem;
    border-radius: var(--border-radius);
    border: 1px solid var(--color-border);
    font-size: 0.875rem;
    color: #4b5563;
  }

  @media screen and (max-width: 768px) {
    .products-section h1 {
      font-size: 1.5rem;
    }

    .products-filter {
      justify-content: flex-start;
      gap: 0.5rem;
    }

    .products-filter__type-button {
      padding: 0.5rem 1rem;
      font-size: 0.8125rem;
    }

    .products-grid {
      grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
      gap: 1.25rem;
    }

    .product-card__image {
      height: 180px;
    }

    .product-card__content {
      padding: 1rem;
    }

    .product-card__title {
      font-size: 1rem;
      -webkit-line-clamp: 1;
    }

    .product-card__price {
      font-size: 0.9375rem;
    }

    .product-card__button {
      padding: 0.75rem 1rem;
      font-size: 0.8125rem;
    }

    .pagination__link {
      padding: 0.5rem 1rem;
      font-size: 0.8125rem;
    }
  }

  @media screen and (max-width: 480px) {
    .products-grid {
      grid-template-columns: 1fr;
    }

    .product-card__image {
      height: 200px;
    }
  }
{% endstyle %}
<section class="products-section" aria-label="Tất cả sản phẩm">
  <h1>Tất cả sản phẩm</h1>

  {% comment %} Nút lọc theo loại sản phẩm {% endcomment %}
  <div class="products-filter">
    {% assign product_types = collection.all_types | sort %}
    <button
      data-filter-type="all"
      class="products-filter__type-button products-filter__type-button--active"
      aria-label="Hiển thị tất cả loại sản phẩm"
    >
      Tất cả
    </button>
    {% if product_types.size > 0 %}
      {% for type in product_types %}
        <button
          data-filter-type="{{ type | handle }}"
          class="products-filter__type-button"
          aria-label="Lọc theo {{ type }}"
        >
          {{ type }}
        </button>
      {% endfor %}
    {% else %}
      <p class="error-message">Không có loại sản phẩm nào. Vui lòng gán loại sản phẩm trong Shopify Admin.</p>
    {% endif %}
  </div>

  <div class="products-grid">
    {% paginate collection.products by 1000 %}
      {% for product in collection.products %}
        <div class="product-card" data-product-type="{{ product.type | handle }}">
          <a href="{{ product.url }}" class="product-card__image-link" aria-label="{{ product.title }}">
            {% if product.featured_image %}
              <img
                src="{{ product.featured_image | image_url: width: 300 }}"
                alt="{{ product.title | escape }}"
                class="product-card__image"
                loading="lazy"
              />
            {% else %}
              <img
                src="{{ 'no-image.svg' | asset_url }}"
                alt="Không có ảnh"
                class="product-card__image"
                loading="lazy"
              />
            {% endif %}
          </a>
          <div class="product-card__content">
            <a href="{{ product.url }}" class="product-card__title">{{ product.title }}</a>
            <div class="product-card__price">
              {% if product.price_varies %}
                Từ {{ product.price_min | money }}
              {% else %}
                {{ product.price | money }}
              {% endif %}
            </div>
            {% form 'product', product, class: 'product-card__form' %}
              <input type="hidden" name="id" value="{{ product.variants.first.id }}">
              <button type="submit" class="product-card__button">Thêm vào giỏ</button>
            {% endform %}
          </div>
        </div>
      {% endfor %}
      {% if collection.products.size == 0 %}
        <p class="error-message">Không tìm thấy sản phẩm nào.</p>
      {% endif %}
    {% endpaginate %}
  </div>

  {% comment %} Phân trang giả lập cho client-side {% endcomment %}
  <nav class="pagination" aria-label="Phân trang" id="pagination">
    <!-- JavaScript sẽ tạo phân trang động -->
  </nav>
</section>

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const filterButtons = document.querySelectorAll('.products-filter__type-button');
  const productCards = document.querySelectorAll('.product-card');
  const paginationContainer = document.getElementById('pagination');
  const itemsPerPage = 12;
  let currentPage = 1;
  let currentFilter = 'all';

  function updatePagination(filteredProducts) {
    const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
    paginationContainer.innerHTML = '';

    if (totalPages <= 1) {
      return; // Không cần phân trang nếu chỉ có 1 trang
    }

    // Nút "Trước"
    const prevLink = document.createElement('a');
    prevLink.href = '#';
    prevLink.className = currentPage > 1 ? 'pagination__link' : 'pagination__link pagination__link--disabled';
    prevLink.textContent = 'Trước';
    prevLink.setAttribute('aria-label', 'Trang trước');
    if (currentPage > 1) {
      prevLink.addEventListener('click', (e) => {
        e.preventDefault();
        currentPage--;
        filterProducts(currentFilter);
      });
    }
    paginationContainer.appendChild(prevLink);

    // Nút số trang
    for (let i = 1; i <= totalPages; i++) {
      const pageLink = document.createElement(i === currentPage ? 'span' : 'a');
      pageLink.className = i === currentPage ? 'pagination__link pagination__link--current' : 'pagination__link';
      pageLink.textContent = i;
      pageLink.setAttribute('aria-label', `Trang ${i}`);
      if (i !== currentPage) {
        pageLink.href = '#';
        pageLink.addEventListener('click', (e) => {
          e.preventDefault();
          currentPage = i;
          filterProducts(currentFilter);
        });
      } else {
        pageLink.setAttribute('aria-current', 'page');
      }
      paginationContainer.appendChild(pageLink);
    }

    // Nút "Sau"
    const nextLink = document.createElement('a');
    nextLink.href = '#';
    nextLink.className = currentPage < totalPages ? 'pagination__link' : 'pagination__link pagination__link--disabled';
    nextLink.textContent = 'Sau';
    nextLink.setAttribute('aria-label', 'Trang sau');
    if (currentPage < totalPages) {
      nextLink.addEventListener('click', (e) => {
        e.preventDefault();
        currentPage++;
        filterProducts(currentFilter);
      });
    }
    paginationContainer.appendChild(nextLink);
  }

  function filterProducts(filterType) {
    currentFilter = filterType; // Lưu filter hiện tại
    const filteredProducts = [];

    // Lọc sản phẩm bằng if-else
    productCards.forEach(card => {
      const productType = card.dataset.productType;
      if (filterType === 'all') {
        filteredProducts.push(card);
      } else if (productType === filterType) {
        filteredProducts.push(card);
      }
    });

    // Ẩn tất cả sản phẩm trước khi hiển thị trang hiện tại
    productCards.forEach(card => {
      card.classList.add('hidden');
    });

    // Hiển thị sản phẩm trong trang hiện tại
    filteredProducts.forEach((card, index) => {
      if (index >= (currentPage - 1) * itemsPerPage && index < currentPage * itemsPerPage) {
        card.classList.remove('hidden');
      }
    });

    // Cập nhật phân trang
    updatePagination(filteredProducts);

    // Xử lý thông báo lỗi
    const existingError = document.querySelector('.products-grid .error-message');
    if (existingError) existingError.remove();
    if (filteredProducts.length === 0) {
      const errorMessage = document.createElement('p');
      errorMessage.className = 'error-message';
      errorMessage.textContent = 'Không tìm thấy sản phẩm cho loại này.';
      document.querySelector('.products-grid').appendChild(errorMessage);
    }
  }

  // Gắn sự kiện cho nút lọc
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      filterButtons.forEach(btn => btn.classList.remove('products-filter__type-button--active'));
      button.classList.add('products-filter__type-button--active');
      currentPage = 1; // Reset trang khi lọc
      filterProducts(button.dataset.filterType);
    });
  });

  // Khởi tạo với tất cả sản phẩm
  filterProducts('all');

  // Debug số lượng sản phẩm
  console.log('Tổng số sản phẩm tải được:', productCards.length);
});
{% endjavascript %}

{% schema %}
{
  "name": "Products",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    }
  ],
  "presets": [
    {
      "name": "Tất cả sản phẩm",
      "category": "Collection"
    }
  ]
}
{% endschema %}