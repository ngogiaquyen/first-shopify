{% comment %}
  File này hiển thị tất cả sản phẩm trong Shopify store dưới dạng lưới responsive.
  Bao gồm ảnh sản phẩm, tiêu đề, giá, nút "Thêm vào giỏ", phân trang, và lọc theo loại sản phẩm bằng JavaScript với if-else.
  Cập nhật để lọc client-side, tránh redirect URL, sử dụng data-product-type và nút button.
{% endcomment %}

{% style %}
  .products-section {
    max-width: 1280px;
    margin: 0 auto;
    padding: var(--page-margin);
    background: var(--color-background);
    color: var(--color-foreground);
  }

  .products-filter {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    justify-content: center;
  }

  .products-filter__type-button {
    background: var(--color-background);
    border: 1px solid var(--color-border);
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    color: var(--color-foreground);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.2s ease, color 0.2s ease, border-color 0.2s ease;
  }

  .products-filter__type-button:hover {
    background: var(--color-background-hover);
    color: var(--color-accent);
  }

  .products-filter__type-button--active {
    background: var(--color-accent);
    color: #ffffff;
    border-color: var(--color-accent);
  }

  .products-filter__type-button:focus {
    outline: none;
    box-shadow: 0 0 0 2px var(--color-accent);
  }

  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
    padding: 1rem 0;
  }

  .product-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .product-card.hidden {
    display: none;
  }

  .product-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .product-card__image {
    width: 100%;
    height: 250px;
    object-fit: cover;
  }

  .product-card__content {
    padding: 1rem;
    text-align: center;
    width: 100%;
  }

  .product-card__title {
    font-size: 1.125rem;
    font-weight: 500;
    margin: 0.5rem 0;
    color: var(--color-foreground);
    text-decoration: none;
  }

  .product-card__title:hover {
    color: var(--color-accent);
  }

  .product-card__price {
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-accent);
    margin-bottom: 1rem;
  }

  .product-card__button {
    background: var(--color-accent);
    color: #ffffff;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    cursor: pointer;
    font-weight: 500;
    transition: background 0.2s ease;
    width: 100%;
    text-align: center;
  }

  .product-card__button:hover {
    background: #1d4ed8; /* Darker shade of accent color */
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    margin-top: 2rem;
  }

  .pagination__link {
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-border);
    border-radius: 0.375rem;
    text-decoration: none;
    color: var(--color-foreground);
    font-size: 1rem;
    transition: background 0.2s ease;
  }

  .pagination__link:hover {
    background: var(--color-background-hover);
    color: var(--color-accent);
  }

  .pagination__link--disabled {
    color: #a0aec0;
    pointer-events: none;
  }

  .pagination__link--current {
    background: var(--color-accent);
    color: #ffffff;
    border-color: var(--color-accent);
  }

  .error-message {
    text-align: center;
    color: #e53e3e;
    padding: 1rem;
  }

  .debug-info {
    background: #f8f8f8;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 0.375rem;
  }

  @media screen and (max-width: 768px) {
    .products-filter {
      justify-content: flex-start;
    }

    .products-filter__type-button {
      padding: 0.5rem 0.75rem;
      font-size: 0.75rem;
    }

    .products-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 1rem;
    }

    .product-card__image {
      height: 150px;
    }

    .product-card__title {
      font-size: 1rem;
    }

    .product-card__price {
      font-size: 0.875rem;
    }

    .product-card__button {
      padding: 0.5rem 1rem;
      font-size: 0.875rem;
    }
  }
{% endstyle %}

<section class="products-section" aria-label="Tất cả sản phẩm">
  <h1>Tất cả sản phẩm</h1>

  {% comment %} Debug để kiểm tra collection và product types {% endcomment %}
  <div class="debug-info">
    <p><strong>Collection hiện tại:</strong> {{ collection.title }} (Handle: {{ collection.handle }})</p>
    <p><strong>Tag hiện tại:</strong> {{ current_tags | join: ', ' }}</p>
    <p><strong>Loại sản phẩm có sẵn:</strong> {{ collection.all_types | join: ', ' }}</p>
  </div>

  {% comment %} Nút lọc theo loại sản phẩm {% endcomment %}
  <div class="products-filter">
    {% assign product_types = collection.all_types | sort %}
    <button
      data-filter-type="all"
      class="products-filter__type-button products-filter__type-button--active"
      aria-label="Hiển thị tất cả loại sản phẩm"
    >
      Tất cả
    </button>
    {% if product_types.size > 0 %}
      {% for type in product_types %}
        <button
          data-filter-type="{{ type | handle }}"
          class="products-filter__type-button"
          aria-label="Lọc theo {{ type }}"
        >
          {{ type }}
        </button>
      {% endfor %}
    {% else %}
      <p class="error-message">Không có loại sản phẩm nào. Vui lòng gán loại sản phẩm trong Shopify Admin.</p>
    {% endif %}
  </div>

  <div class="products-grid">
    {% for product in collection.products %}
      <div class="product-card" data-product-type="{{ product.type | handle }}">
        <a href="{{ product.url }}" class="product-card__image-link" aria-label="{{ product.title }}">
          {% if product.featured_image %}
            <img
              src="{{ product.featured_image | image_url: width: 300 }}"
              alt="{{ product.title | escape }}"
              class="product-card__image"
              loading="lazy"
            />
          {% else %}
            <img
              src="{{ 'no-image.svg' | asset_url }}"
              alt="Không có ảnh"
              class="product-card__image"
              loading="lazy"
            />
          {% endif %}
        </a>
        <div class="product-card__content">
          <a href="{{ product.url }}" class="product-card__title">{{ product.title }}</a>
          <div class="product-card__price">
            {% if product.price_varies %}
              Từ {{ product.price_min | money }}
            {% else %}
              {{ product.price | money }}
            {% endif %}
          </div>
          {% form 'product', product, class: 'product-card__form' %}
            <input type="hidden" name="id" value="{{ product.variants.first.id }}">
            <button type="submit" class="product-card__button">Thêm vào giỏ</button>
          {% endform %}
        </div>
      </div>
    {% endfor %}
    {% if collection.products.size == 0 %}
      <p class="error-message">Không tìm thấy sản phẩm nào.</p>
    {% endif %}
  </div>

  {% comment %} Phân trang giả lập cho client-side {% endcomment %}
  <nav class="pagination" aria-label="Phân trang" id="pagination">
    <!-- JavaScript sẽ tạo phân trang động -->
  </nav>
</section>

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const filterButtons = document.querySelectorAll('.products-filter__type-button');
  const productCards = document.querySelectorAll('.product-card');
  const paginationContainer = document.getElementById('pagination');
  const itemsPerPage = 12;
  let currentPage = 1;

  function updatePagination(filteredProducts) {
    const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
    paginationContainer.innerHTML = '';

    if (totalPages <= 1) return;

    if (currentPage > 1) {
      const prevLink = document.createElement('a');
      prevLink.href = '#';
      prevLink.className = 'pagination__link';
      prevLink.textContent = 'Trước';
      prevLink.setAttribute('aria-label', 'Trang trước');
      prevLink.addEventListener('click', (e) => {
        e.preventDefault();
        currentPage--;
        filterProducts(document.querySelector('.products-filter__type-button--active').dataset.filterType);
      });
      paginationContainer.appendChild(prevLink);
    } else {
      const prevSpan = document.createElement('span');
      prevSpan.className = 'pagination__link pagination__link--disabled';
      prevSpan.textContent = 'Trước';
      prevSpan.setAttribute('aria-disabled', 'true');
      paginationContainer.appendChild(prevSpan);
    }

    for (let i = 1; i <= totalPages; i++) {
      const pageLink = document.createElement(i === currentPage ? 'span' : 'a');
      pageLink.className = i === currentPage ? 'pagination__link pagination__link--current' : 'pagination__link';
      pageLink.textContent = i;
      pageLink.setAttribute('aria-label', `Trang ${i}`);
      if (i !== currentPage) {
        pageLink.href = '#';
        pageLink.addEventListener('click', (e) => {
          e.preventDefault();
          currentPage = i;
          filterProducts(document.querySelector('.products-filter__type-button--active').dataset.filterType);
        });
      } else {
        pageLink.setAttribute('aria-current', 'page');
      }
      paginationContainer.appendChild(pageLink);
    }

    if (currentPage < totalPages) {
      const nextLink = document.createElement('a');
      nextLink.href = '#';
      nextLink.className = 'pagination__link';
      nextLink.textContent = 'Sau';
      nextLink.setAttribute('aria-label', 'Trang sau');
      nextLink.addEventListener('click', (e) => {
        e.preventDefault();
        currentPage++;
        filterProducts(document.querySelector('.products-filter__type-button--active').dataset.filterType);
      });
      paginationContainer.appendChild(nextLink);
    } else {
      const nextSpan = document.createElement('span');
      nextSpan.className = 'pagination__link pagination__link--disabled';
      nextSpan.textContent = 'Sau';
      nextSpan.setAttribute('aria-disabled', 'true');
      paginationContainer.appendChild(nextSpan);
    }
  }

  function filterProducts(filterType) {
    const filteredProducts = [];

    productCards.forEach(card => {
      const productType = card.dataset.productType;
      if (filterType === 'all') {
        filteredProducts.push(card);
        card.classList.remove('hidden');
      } else if (productType === filterType) {
        filteredProducts.push(card);
        card.classList.remove('hidden');
      } else {
        card.classList.add('hidden');
      }
    });

    currentPage = 1; // Reset về trang 1 khi lọc
    updatePagination(filteredProducts);

    filteredProducts.forEach((card, index) => {
      if (index >= (currentPage - 1) * itemsPerPage && index < currentPage * itemsPerPage) {
        card.classList.remove('hidden');
      } else {
        card.classList.add('hidden');
      }
    });

    if (filteredProducts.length === 0) {
      const errorMessage = document.createElement('p');
      errorMessage.className = 'error-message';
      errorMessage.textContent = 'Không tìm thấy sản phẩm cho loại này.';
      document.querySelector('.products-grid').appendChild(errorMessage);
    } else {
      const existingError = document.querySelector('.products-grid .error-message');
      if (existingError) existingError.remove();
    }
  }

  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      filterButtons.forEach(btn => btn.classList.remove('products-filter__type-button--active'));
      button.classList.add('products-filter__type-button--active');
      filterProducts(button.dataset.filterType);
    });
  });

  // Khởi tạo với tất cả sản phẩm
  filterProducts('all');
});
{% endjavascript %}

{% schema %}
{
  "name": "Products",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    }
  ],
  "presets": [
    {
      "name": "Tất cả sản phẩm",
      "category": "Collection"
    }
  ]
}
{% endschema %}