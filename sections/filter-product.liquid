{% comment %}
  Template hiển thị tất cả sản phẩm trong Shopify store dưới dạng lưới responsive.
  Tối ưu cho mobile (1 sản phẩm/dòng), tablet (3 sản phẩm/dòng), laptop (4 sản phẩm/dòng).
  Hình ảnh sản phẩm được điều chỉnh thành hình vuông với aspect-ratio 1:1.
  CSS hiện đại, mượt mà, giữ nguyên logic lọc và phân trang client-side.
{% endcomment %}

{% style %}
  :root {
    --color-background: #ffffff;
    --color-foreground: #1f2937;
    --color-accent: #2563eb;
    --color-accent-dark: #1d4ed8;
    --color-border: #d1d5db;
    --color-background-hover: #f3f4f6;
    --page-margin: clamp(1rem, 3vw, 2rem);
    --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.1);
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .products-section {
    max-width: 1440px;
    margin: 0 auto;
    padding: var(--page-margin);
    background: var(--color-background);
    color: var(--color-foreground);
    font-family: 'Inter', system-ui, sans-serif;
    width: 100%;
  }

  .products-section h1 {
    font-size: clamp(1.5rem, 5vw, 2.25rem);
    font-weight: 700;
    text-align: center;
    margin-bottom: 1.5rem;
    color: var(--color-foreground);
  }

  .products-filter {
    display: flex;
    flex-wrap: wrap;
    gap: clamp(0.5rem, 2vw, 0.75rem);
    margin-bottom: 2rem;
    justify-content: center;
  }

  .products-filter__type-button {
    background: var(--color-background);
    border: 1px solid var(--color-border);
    padding: clamp(0.5rem, 2vw, 0.75rem) clamp(1rem, 3vw, 1.25rem);
    border-radius: 0.5rem;
    color: var(--color-foreground);
    font-size: clamp(0.75rem, 2.5vw, 0.875rem);
    font-weight: 500;
    cursor: pointer;
    transition: var(--transition);
  }

  .products-filter__type-button:hover {
    background: var(--color-background-hover);
    color: var(--color-accent);
    transform: translateY(-2px);
  }

  .products-filter__type-button--active {
    background: linear-gradient(135deg, var(--color-accent) 0%, var(--color-accent-dark) 100%);
    color: #ffffff;
    border-color: var(--color-accent);
  }

  .products-filter__type-button:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.3);
  }

  .products-grid {
    display: grid;
    grid-template-columns: 1fr; /* Mặc định cho mobile: 1 sản phẩm/dòng */
    gap: clamp(1rem, 3vw, 1.5rem);
    padding: 1rem 0;
  }

  .product-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: 0.75rem;
    overflow: hidden;
    transition: var(--transition);
  }

  .product-card.hidden {
    display: none;
  }

  .product-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-md);
  }

  .product-card__image {
    width: 100%;
    aspect-ratio: 1/1; /* Đảm bảo hình vuông */
    object-fit: cover;
    background: #f9fafb;
  }

  .product-card__content {
    padding: clamp(0.75rem, 2vw, 1rem);
    text-align: center;
    width: 100%;
  }

  .product-card__title {
    font-size: clamp(1rem, 3vw, 1.125rem);
    font-weight: 600;
    margin: 0.5rem 0;
    color: var(--color-foreground);
    text-decoration: none;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .product-card__title:hover {
    color: var(--color-accent);
  }

  .product-card__price {
    font-size: clamp(0.875rem, 2.5vw, 1rem);
    font-weight: 600;
    color: var(--color-accent);
    margin-bottom: 1rem;
  }

  .product-card__button {
    background: linear-gradient(135deg, var(--color-accent) 0%, var(--color-accent-dark) 100%);
    color: #ffffff;
    border: none;
    padding: clamp(0.5rem, 2vw, 0.75rem) clamp(1rem, 3vw, 1.5rem);
    border-radius: 0.5rem;
    cursor: pointer;
    font-weight: 500;
    transition: var(--transition);
    width: 100%;
    text-align: center;
  }

  .product-card__button:hover {
    background: var(--color-accent-dark);
    transform: scale(1.02);
  }

  .product-card__button:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.3);
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    margin-top: 2rem;
  }

  .pagination__link {
    padding: clamp(0.5rem, 2vw, 0.75rem) clamp(1rem, 3vw, 1.25rem);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    text-decoration: none;
    color: var(--color-foreground);
    font-size: clamp(0.875rem, 2.5vw, 1rem);
    transition: var(--transition);
  }

  .pagination__link:hover {
    background: var(--color-background-hover);
    color: var(--color-accent);
  }

  .pagination__link--disabled {
    color: #9ca3af;
    pointer-events: none;
  }

  .pagination__link--current {
    background: var(--color-accent);
    color: #ffffff;
    border-color: var(--color-accent);
  }

  .error-message {
    text-align: center;
    color: #dc2626;
    padding: 1rem;
    font-size: clamp(0.875rem, 2.5vw, 1rem);
  }

  .debug-info {
    background: #f9fafb;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    color: #4b5563;
  }

  /* Mobile: 1 sản phẩm/dòng (max-width: 767px) */
  @media screen and (max-width: 767px) {
    .products-grid {
      grid-template-columns: 1fr;
    }

    .product-card__image {
      aspect-ratio: 1/1; /* Giữ hình vuông */
    }

    .product-card__title {
      font-size: clamp(0.875rem, 2.5vw, 1rem);
    }

    .product-card__price {
      font-size: clamp(0.75rem, 2vw, 0.875rem);
    }

    .product-card__button {
      padding: clamp(0.5rem, 2vw, 0.625rem) clamp(0.75rem, 2.5vw, 1rem);
      font-size: clamp(0.75rem, 2vw, 0.875rem);
    }
  }

  /* Tablet: 3 sản phẩm/dòng (768px - 1023px) */
  @media screen and (min-width: 768px) and (max-width: 1023px) {
    .products-grid {
      grid-template-columns: repeat(3, 1fr);
    }

    .product-card__image {
      aspect-ratio: 1/1; /* Giữ hình vuông */
    }
  }

  /* Laptop: 4 sản phẩm/dòng (1024px trở lên) */
  @media screen and (min-width: 1024px) {
    .products-grid {
      grid-template-columns: repeat(4, 1fr);
    }

    .product-card__image {
      aspect-ratio: 1/1; /* Giữ hình vuông */
    }
  }
{% endstyle %}

<section class="products-section" aria-label="Tất cả sản phẩm">
  <h1>All products</h1>
  {% comment %} Nút lọc theo loại sản phẩm {% endcomment %}
  <div class="products-filter">
    {% assign product_types = collection.all_types | sort %}
    <button
      data-filter-type="all"
      class="products-filter__type-button products-filter__type-button--active"
      aria-label="Show all products"
    >
      All
    </button>
    {% if product_types.size > 0 %}
      {% for type in product_types %}
        <button
          data-filter-type="{{ type | handle }}"
          class="products-filter__type-button"
          aria-label="Lọc theo {{ type }}"
        >
          {{ type }}
        </button>
      {% endfor %}
    {% else %}
      <p class="error-message">No product type. Please specify a product type in Shopify Admin.</p>
    {% endif %}
  </div>

  <div class="products-grid">
    {% paginate collection.products by 1000 %}
      {% for product in collection.products %}
        <div class="product-card" data-product-type="{{ product.type | handle }}">
          <a href="{{ product.url }}" class="product-card__image-link" aria-label="{{ product.title }}">
            {% if product.featured_image %}
              <img
                src="{{ product.featured_image | image_url: width: 300 }}"
                srcset="
                  {{ product.featured_image | image_url: width: 150 }} 150w,
                  {{ product.featured_image | image_url: width: 300 }} 300w,
                  {{ product.featured_image | image_url: width: 600 }} 600w
                "
                sizes="(max-width: 767px) 100vw, (max-width: 1023px) 33vw, 25vw"
                alt="{{ product.title | escape }}"
                class="product-card__image"
                loading="lazy"
              />
            {% else %}
              <img
                src="{{ 'no-image.svg' | asset_url }}"
                alt="No Image"
                class="product-card__image"
                loading="lazy"
              />
            {% endif %}
          </a>
          <div class="product-card__content">
            <a href="{{ product.url }}" class="product-card__title">{{ product.title }}</a>
            <div class="product-card__price">
              {% if product.price_varies %}
                Từ {{ product.price_min | money }}
              {% else %}
                {{ product.price | money }}
              {% endif %}
            </div>
            {% form 'product', product, class: 'product-card__form' %}
              <input type="hidden" name="id" value="{{ product.variants.first.id }}">
              <button type="submit" class="product-card__button">Add to cart</button>
            {% endform %}
          </div>
        </div>
      {% endfor %}
      {% if collection.products.size == 0 %}
        <p class="error-message">No products found</p>
      {% endif %}
    {% endpaginate %}
  </div>

  {% comment %} Phân trang giả lập cho client-side {% endcomment %}
  <nav class="pagination" aria-label="Phân trang" id="pagination">
    <!-- JavaScript sẽ tạo phân trang động -->
  </nav>
</section>

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const filterButtons = document.querySelectorAll('.products-filter__type-button');
  const productCards = document.querySelectorAll('.product-card');
  const paginationContainer = document.getElementById('pagination');
  const itemsPerPage = 12;
  let currentPage = 1;
  let currentFilter = 'all';
  let debounceTimeout;

  function updatePagination(filteredProducts) {
    const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
    paginationContainer.innerHTML = '';

    if (totalPages <= 1) return;

    const prevLink = document.createElement('a');
    prevLink.href = '#';
    prevLink.className = currentPage > 1 ? 'pagination__link' : 'pagination__link pagination__link--disabled';
    prevLink.textContent = 'First';
    prevLink.setAttribute('aria-label', 'Trang trước');
    if (currentPage > 1) {
      prevLink.addEventListener('click', (e) => {
        e.preventDefault();
        currentPage--;
        filterProducts(currentFilter);
      });
    }
    paginationContainer.appendChild(prevLink);

    for (let i = 1; i <= totalPages; i++) {
      const pageLink = document.createElement(i === currentPage ? 'span' : 'a');
      pageLink.className = i === currentPage ? 'pagination__link pagination__link--current' : 'pagination__link';
      pageLink.textContent = i;
      pageLink.setAttribute('aria-label', `Trang ${i}`);
      if (i !== currentPage) {
        pageLink.href = '#';
        pageLink.addEventListener('click', (e) => {
          e.preventDefault();
          currentPage = i;
          filterProducts(currentFilter);
        });
      } else {
        pageLink.setAttribute('aria-current', 'page');
      }
      paginationContainer.appendChild(pageLink);
    }

    const nextLink = document.createElement('a');
    nextLink.href = '#';
    nextLink.className = currentPage < totalPages ? 'pagination__link' : 'pagination__link pagination__link--disabled';
    nextLink.textContent = 'Last';
    nextLink.setAttribute('aria-label', 'Trang sau');
    if (currentPage < totalPages) {
      nextLink.addEventListener('click', (e) => {
        e.preventDefault();
        currentPage++;
        filterProducts(currentFilter);
      });
    }
    paginationContainer.appendChild(nextLink);
  }

  function filterProducts(filterType) {
    clearTimeout(debounceTimeout);
    debounceTimeout = setTimeout(() => {
      currentFilter = filterType;
      const filteredProducts = [];

      productCards.forEach(card => {
        const productType = card.dataset.productType;
        if (filterType === 'all' || productType === filterType) {
          filteredProducts.push(card);
        }
      });

      productCards.forEach(card => card.classList.add('hidden'));

      filteredProducts.forEach((card, index) => {
        if (index >= (currentPage - 1) * itemsPerPage && index < currentPage * itemsPerPage) {
          card.classList.remove('hidden');
        }
      });

      const existingError = document.querySelector('.products-grid .error-message');
      if (existingError) existingError.remove();
      if (filteredProducts.length === 0) {
        const errorMessage = document.createElement('p');
        errorMessage.className = 'error-message';
        errorMessage.textContent = 'Không tìm thấy sản phẩm cho loại này.';
        document.querySelector('.products-grid').appendChild(errorMessage);
      }

      updatePagination(filteredProducts);
    }, 100);
  }
  
  const url = new URL(window.location.href);
  const collectionValue = url.searchParams.get('collection');
  console.log(collectionValue)
  // Tự động kích hoạt nút lọc dựa trên collectionValue
  if (collectionValue) {
    let decodedCollectionValue = decodeURIComponent(collectionValue).replaceAll(/\s+/g, '-'); // Chuẩn hóa giá trị collection
    decodedCollectionValue =  decodedCollectionValue.replaceAll("-", ' ')

    console.log(decodedCollectionValue);
    console.log(filterButtons)

    const matchingButton = Array.from(filterButtons).find(button => 
      button.dataset.filterType === decodedCollectionValue
    );
    console.log(matchingButton);

    if (matchingButton) {
      filterButtons.forEach(btn => btn.classList.remove('products-filter__type-button--active'));
      matchingButton.classList.add('products-filter__type-button--active');
      currentFilter = decodedCollectionValue;
      filterProducts(decodedCollectionValue);
    } else {
      console.warn(`Không tìm thấy nút lọc cho collection: ${collectionValue}`);
      filterProducts('all');
    }
  } else {
    filterProducts('all');
  }

  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      filterButtons.forEach(btn => btn.classList.remove('products-filter__type-button--active'));
      button.classList.add('products-filter__type-button--active');
      currentPage = 1;
      filterProducts(button.dataset.filterType);
    });
  });

  console.log('Tổng số sản phẩm tải được:', productCards.length);
});
{% endjavascript %}

{% schema %}
{
  "name": "Products",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    }
  ],
  "presets": [
    {
      "name": "Tất cả sản phẩm",
      "category": "Collection"
    }
  ]
}
{% endschema %}