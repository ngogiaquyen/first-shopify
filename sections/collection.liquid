{% comment %}
  This section is used in the collection template to render collection page
  listing all products within a collection with product type filtering.
  https://shopify.dev/docs/storefronts/themes/architecture/templates/collection
{% endcomment %}

<div class="collection-container">
  <h1>{{ collection.title }}</h1>

  <div class="collection-filter">
    <button class="filter-button {% if selected_type == 'all' %}active{% endif %}" data-filter="all">All Products ({{ collection.products.size }})</button>
    {% assign product_types = collection.products | map: 'type' | uniq | sort %}
    {% assign type_counts = '' | split: '' %}
    {% for product in collection.products %}
      {% assign type = product.type | handleize %}
      {% assign type_counts = type_counts | push: type %}
    {% endfor %}
    {% for type in product_types %}
      {% if type != blank %}
        {% assign type_handle = type | handleize %}
        {% assign count = type_counts | where: type_handle | size %}
        <button class="filter-button {% if selected_type == type_handle %}active{% endif %}" data-filter="{{ type_handle }}">{{ type }} ({{ count }})</button>
      {% endif %}
    {% endfor %}
  </div>

  <div class="collection-products" id="product-grid">
    {% assign selected_type = request.params.type | default: 'all' %}
    {% paginate collection.products by 20 %}
      {% for product in collection.products %}
        {% assign product_type_handle = product.type | handleize %}
        {% if selected_type == 'all' or product_type_handle == selected_type %}
          <div class="collection-product" data-product-type="{{ product_type_handle }}">
            {% if product.featured_image %}
              {% render 'image',
                class: 'collection-product__image',
                image: product.featured_image,
                url: product.url,
                width: 400,
                height: 400,
                crop: 'center'
              %}
            {% endif %}
            <div class="collection-product__content">
              <p>{{ product.title | escape | link_to: product.url }}</p>
              <p>{{ product.price | money }}</p>
              <p class="product-type">Type: {{ product.type }}</p>
            </div>
          </div>
        {% endif %}
      {% endfor %}
      {% if paginate.pages > 1 %}
        <nav class="pagination" role="navigation" aria-label="Pagination">
          <ul class="pagination__list">
            {% if paginate.previous.is_link %}
              <li class="pagination__item">
                <a href="{{ paginate.previous.url }}&type={{ selected_type | url_encode }}" class="pagination__link pagination__link--prev" aria-label="Previous page">
                  <span>←</span>
                </a>
              </li>
            {% endif %}
            {% for part in paginate.parts %}
              {% if part.is_link %}
                <li class="pagination__item">
                  <a href="{{ part.url }}&type={{ selected_type | url_encode }}" class="pagination__link" aria-label="Page {{ part.title }}">{{ part.title }}</a>
                </li>
              {% else %}
                <li class="pagination__item">
                  <span class="pagination__link pagination__link--current" aria-current="page">{{ part.title }}</span>
                </li>
              {% endif %}
            {% endfor %}
            {% if paginate.next.is_link %}
              <li class="pagination__item">
                <a href="{{ paginate.next.url }}&type={{ selected_type | url_encode }}" class="pagination__link pagination__link--next" aria-label="Next page">
                  <span>→</span>
                </a>
              </li>
            {% endif %}
          </ul>
        </nav>
      {% endif %}
    {% endpaginate %}
  </div>
</div>

{% stylesheet %}
.collection-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 24px 16px;
}

.collection-products {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(260px, 1fr));
  gap: 20px;
  margin: 32px 0;
  padding: 0;
}

.collection-filter {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin: 24px 0;
  justify-content: flex-start;
}

.filter-button {
  padding: 10px 20px;
  border: 1px solid #d1d5db;
  background: #ffffff;
  border-radius: 6px;
  cursor: pointer;
  font-size: 14px;
  font-weight: 500;
  text-transform: capitalize;
  transition: all 0.2s ease;
}

.filter-button.active,
.filter-button:hover {
  background: #111827;
  color: #ffffff;
  border-color: #111827;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.collection-product {
  background: #ffffff;
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  overflow: hidden;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.collection-product:hover {
  transform: translateY(-3px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
}

.collection-product__image img {
  width: 100%;
  height: 180px;
  object-fit: cover;
  display: block;
  transition: transform 0.3s ease;
}

.collection-product:hover .collection-product__image img {
  transform: scale(1.03);
}

.collection-product__content {
  padding: 16px;
  text-align: center;
}

.collection-product__content p {
  margin: 6px 0;
  font-size: 14px;
}

.collection-product__content p:first-child a {
  color: #111827;
  font-weight: 600;
  text-decoration: none;
  transition: color 0.2s ease;
}

.collection-product__content p:first-child a:hover {
  color: #2563eb;
}

.collection-product__content .product-type {
  color: #6b7280;
  font-size: 12px;
}

.collection-product.hidden {
  display: none;
}

.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 32px;
  width: 100%;
}

.pagination__list {
  display: flex;
  gap: 8px;
  list-style: none;
  padding: 0;
  margin: 0;
  justify-content: center;
}

.pagination__item {
  display: flex;
  align-items: center;
}

.pagination__link {
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 36px;
  height: 36px;
  padding: 0 10px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  background: #ffffff;
  color: #111827;
  font-size: 14px;
  font-weight: 500;
  text-decoration: none;
  transition: all 0.2s ease;
}

.pagination__link:hover {
  background: #111827;
  color: #ffffff;
  border-color: #111827;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.pagination__link--current {
  background: #111827;
  color: #ffffff;
  border-color: #111827;
  cursor: default;
}

.pagination__link--prev,
.pagination__link--next {
  font-size: 16px;
  font-weight: 600;
}

/* Tablet */
@media (max-width: 768px) {
  .collection-container {
    padding: 16px 12px;
  }

  .collection-products {
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 16px;
    margin: 24px 0;
  }

  .collection-product__image img {
    height: 140px;
  }

  .collection-product__content {
    padding: 12px;
  }

  .filter-button {
    padding: 8px 16px;
    font-size: 13px;
  }

  .pagination__link {
    min-width: 32px;
    height: 32px;
    font-size: 13px;
  }

  .pagination__link--prev,
  .pagination__link--next {
    font-size: 14px;
  }
}

/* Mobile */
@media (max-width: 480px) {
  .collection-container {
    padding: 12px 8px;
  }

  .collection-products {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 12px;
    margin: 16px 0;
  }

  .collection-product__image img {
    height: 110px;
  }

  .collection-product__content {
    padding: 10px;
  }

  .collection-product__content p {
    font-size: 13px;
  }

  .collection-product__content .product-type {
    font-size: 11px;
  }

  .filter-button {
    padding: 6px 12px;
    font-size: 12px;
  }

  .pagination__link {
    min-width: 28px;
    height: 28px;
    font-size: 12px;
  }

  .pagination__link--prev,
  .pagination__link--next {
    font-size: 13px;
  }
}
{% endstylesheet %}

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const filterButtons = document.querySelectorAll('.filter-button');
  const products = document.querySelectorAll('.collection-product');
  const currentType = new URLSearchParams(window.location.search).get('type') || 'all';

  // Set active button based on URL parameter
  filterButtons.forEach(button => {
    if (button.getAttribute('data-filter') === currentType) {
      button.classList.add('active');
    } else {
      button.classList.remove('active');
    }
  });

  // Filter products on page load (client-side for initial display)
  products.forEach(product => {
    const productType = product.getAttribute('data-product-type');
    if (currentType === 'all' || productType === currentType) {
      product.classList.remove('hidden');
    } else {
      product.classList.add('hidden');
    }
  });

  // Handle filter button clicks
  filterButtons.forEach(button => {
    button.addEventListener('click', function() {
      const filterType = this.getAttribute('data-filter');

      // Update URL with filter parameter
      const url = new URL(window.location);
      url.searchParams.set('type', filterType);
      window.location.href = url.toString(); // Reload page to apply server-side filtering
    });
  });
});
{% endjavascript %}

{% schema %}
{
  "name": "t:general.collection",
  "settings": []
}
{% endschema %}